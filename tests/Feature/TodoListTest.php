<?php

namespace Tests\Feature;

use App\Models\TodoList;
use Database\Factories\TodoListFactory;
use Database\Seeders\TodoListSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TodoListTest extends TestCase
{
    use RefreshDatabase;
	private $list;
    public function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->list=TodoList::factory()->create();

	}

	/**
     * A basic feature test example.
     *
     * @return void
     */
    public function testForFetchTodoList()
    {

        //Added withoutExceptionHandling() in TestCase class
        // $this->withoutExceptionHandling();
        //preparation
       // $res=TodoList::factory()->create();
		// Run a single seeder...
		//$this->seed(TodoListSeeder::class);

        //action
        $responce = $this->getJson(route('todo-lists'));
        //assertion
        $this->assertEquals(1, count($responce->json()));
    }

    public function testFetchSingleTodoList(){
		//preparation
	//	$list=$this->seed(TodoListSeeder::class);
		//action
		$responce=$this->getJson(route('todo-list.show',$this->list->id))->assertOk();

	//	$this->assertEquals($responce->json()['name'],"Navid");

	}
	public function testStoreTodoList(){

    	$responce=$this->postJson(route('todo-store'),['name'=>'My List1'])
		->assertCreated()->json()	;

    	$this->assertDatabaseHas('todo_lists',['name'=>'My List1']);
	}

	public function testValidationTodoList(){
    	$this->withoutExceptionHandling();
		$responce=$this->postJson(route('todo-store'),['name'=>'My List1']);
		$responce->assertCreated();
    }

    public function testDeleteTodoList(){
    	$this->withExceptionHandling();
    	$res=$this->deleteJson(route('todo-list.destroy',$this->list->id))->assertNoContent();

	}

	public function testUpdateTodoList(){
    	$this->putJson(route('todo-list.update',$this->list->id),['name'=>'Testing Updated Name'])
			->assertOk();
    }

}
